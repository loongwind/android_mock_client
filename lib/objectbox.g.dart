// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/mock_data.dart';
import 'model/mock_server.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3735452852692889002),
      name: 'MockData',
      lastPropertyId: const IdUid(5, 560779303076101383),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7063342161002143988),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6270952128662601623),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3465249730208893184),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 489188390909583648),
            name: 'response',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 560779303076101383),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1028564796892374294),
      name: 'MockServer',
      lastPropertyId: const IdUid(3, 1812212808381507140),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 744752117981793710),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6090576929939378202),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1812212808381507140),
            name: 'addr',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6313189150742063222),
            name: 'data',
            targetId: const IdUid(1, 3735452852692889002))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1028564796892374294),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 6313189150742063222),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MockData: EntityDefinition<MockData>(
        model: _entities[0],
        toOneRelations: (MockData object) => [],
        toManyRelations: (MockData object) => {},
        getId: (MockData object) => object.id,
        setId: (MockData object, int id) {
          object.id = id;
        },
        objectToFB: (MockData object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final urlOffset = fbb.writeString(object.url);
          final responseOffset = fbb.writeString(object.response);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, urlOffset);
          fbb.addOffset(3, responseOffset);
          fbb.addOffset(4, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MockData(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uuid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    MockServer: EntityDefinition<MockServer>(
        model: _entities[1],
        toOneRelations: (MockServer object) => [],
        toManyRelations: (MockServer object) =>
            {RelInfo<MockServer>.toMany(1, object.id): object.data},
        getId: (MockServer object) => object.id,
        setId: (MockServer object, int id) {
          object.id = id;
        },
        objectToFB: (MockServer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final addrOffset = fbb.writeString(object.addr);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, addrOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MockServer(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.data,
              store,
              RelInfo<MockServer>.toMany(1, object.id),
              store.box<MockServer>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MockData] entity fields to define ObjectBox queries.
class MockData_ {
  /// see [MockData.id]
  static final id = QueryIntegerProperty<MockData>(_entities[0].properties[0]);

  /// see [MockData.uuid]
  static final uuid = QueryStringProperty<MockData>(_entities[0].properties[1]);

  /// see [MockData.url]
  static final url = QueryStringProperty<MockData>(_entities[0].properties[2]);

  /// see [MockData.response]
  static final response =
      QueryStringProperty<MockData>(_entities[0].properties[3]);

  /// see [MockData.name]
  static final name = QueryStringProperty<MockData>(_entities[0].properties[4]);
}

/// [MockServer] entity fields to define ObjectBox queries.
class MockServer_ {
  /// see [MockServer.id]
  static final id =
      QueryIntegerProperty<MockServer>(_entities[1].properties[0]);

  /// see [MockServer.name]
  static final name =
      QueryStringProperty<MockServer>(_entities[1].properties[1]);

  /// see [MockServer.addr]
  static final addr =
      QueryStringProperty<MockServer>(_entities[1].properties[2]);

  /// see [MockServer.data]
  static final data =
      QueryRelationToMany<MockServer, MockData>(_entities[1].relations[0]);
}
